(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{"7pVq":function(t,e,n){"use strict";function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&o(t,e)}function o(t,e){return(o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function i(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=c(t);if(e){var o=c(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return a(this,n)}}function a(t,e){return!e||"object"!==f(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function l(t,e,n){return e&&s(t.prototype,e),n&&s(t,n),t}function f(t){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function h(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return p(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function p(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function y(t,e){var n;for(var r in n="string"==typeof t?new m(t):new t,e)n.setAttribute(r,e[r]);for(var o=function t(e){var r,o=h(e);try{for(o.s();!(r=o.n()).done;){var i=r.value;"object"===f(i)&&i instanceof Array?t(i):("string"==typeof i&&(i=new g(i)),n.appendChild(i))}}catch(t){o.e(t)}finally{o.f()}},i=arguments.length,a=new Array(i>2?i-2:0),c=2;c<i;c++)a[c-2]=arguments[c];return o(a),n}n.r(e);var d=Symbol("state"),v=Symbol("attributes"),b=function(){function t(e){u(this,t),this[v]=Object.create(null),this[d]=Object.create(null)}return l(t,[{key:"render",value:function(){return this.root}},{key:"setAttribute",value:function(t,e){this[v][t]=e}},{key:"appendChild",value:function(t){t.mountTo(this.root)}},{key:"mountTo",value:function(t){this.root||this.render(),t.appendChild(this.root)}},{key:"triggerEvent",value:function(t,e){this[v]["on".concat(t.replace(/^[\s\S]/,(function(t){return t.toUpperCase()})))](new CustomEvent(t,{detail:e}))}}]),t}(),m=function(t){r(n,t);var e=i(n);function n(t){var r;return u(this,n),(r=e.call(this)).root=document.createElement(t),r}return l(n,[{key:"setAttribute",value:function(t,e){this.root.setAttribute(t,e)}}]),n}(b),g=function(t){r(n,t);var e=i(n);function n(t){var r;return u(this,n),(r=e.call(this)).root=document.createTextNode(t),r}return n}(b);function w(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return S(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return S(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function S(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function k(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function j(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function O(t,e,n){return e&&j(t.prototype,e),n&&j(t,n),t}var E=function(){function t(e){k(this,t),this.element=e}return O(t,[{key:"dispatch",value:function(t,e){var n=new Event(t);for(var r in e)n[r]=e[r];this.element.dispatchEvent(n)}}]),t}(),X=function t(e,n){k(this,t);var r=!1,o=new Map;e.addEventListener("mousedown",(function(t){var e=Object.create(null);o.set("mouse".concat(1<<t.button),e),n.start(t,e);var i=function(t){for(var e,r=1;r<=t.buttons;){if(r&t.buttons){e=2===r?4:4===r?2:r;var i=o.get("mouse".concat(e));n.move(t,i)}r<<=1}};r||(document.addEventListener("mousemove",i),document.addEventListener("mouseup",(function t(e){var a=o.get("mouse".concat(1<<e.button));n.end(e,a),o.delete("mouse".concat(1<<e.button)),0===e.buttons&&(document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",t),r=!1)})),r=!0)})),e.addEventListener("touchstart",(function(t){var e,r=w(t.changedTouches);try{for(r.s();!(e=r.n()).done;){var i=e.value,a=Object.create(null);o.set(i.identifier,a),n.start(i,a)}}catch(t){r.e(t)}finally{r.f()}})),e.addEventListener("touchmove",(function(t){var e,r=w(t.changedTouches);try{for(r.s();!(e=r.n()).done;){var i=e.value,a=o.get(i.identifier);n.move(i,a)}}catch(t){r.e(t)}finally{r.f()}})),e.addEventListener("touchend",(function(t){var e,r=w(t.changedTouches);try{for(r.s();!(e=r.n()).done;){var i=e.value,a=o.get(i.identifier);n.end(i,a),o.delete(i.identifier)}}catch(t){r.e(t)}finally{r.f()}})),e.addEventListener("touchcancel",(function(t){var e,r=w(t.changedTouches);try{for(r.s();!(e=r.n()).done;){var i=e.value,a=o.get(i.identifier);n.cancel(i,a),o.delete(i.identifier)}}catch(t){r.e(t)}finally{r.f()}}))},A=function(){function t(e){k(this,t),this.dispatcher=e}return O(t,[{key:"start",value:function(t,e){var n=this;e.startX=t.clientX,e.startY=t.clientY,this.dispatcher.dispatch("start",{clientX:t.clientX,clientY:t.clientY}),e.points=[{t:Date.now(),x:t.clientX,y:t.clientY}],e.isTap=!0,e.isPan=!1,e.isPress=!1,e.handler=setTimeout((function(){e.isTap=!1,e.isPan=!1,e.isPress=!0,e.handler=null,n.dispatcher.dispatch("press",{})}),500)}},{key:"move",value:function(t,e){var n=t.clientX-e.startX,r=t.clientY-e.startY;!e.isPan&&Math.pow(n,2)+Math.pow(r,2)>100&&(e.isPan=!0,e.isPress=!1,e.isTap=!1,e.isVertical=Math.abs(n)<Math.abs(r),this.dispatcher.dispatch("panstart",{startX:e.startX,startY:e.startY,clientX:t.clientX,clientY:t.clientY,isVertical:e.isVertical}),clearTimeout(e.handler)),e.isPan&&this.dispatcher.dispatch("pan",{startX:e.startX,startY:e.startY,clientX:t.clientX,clientY:t.clientY,isVertical:e.isVertical}),e.points=e.points.filter((function(t){return Date.now()-t.t<500})),e.points.push({t:Date.now(),x:t.clientX,y:t.clientY})}},{key:"end",value:function(t,e){var n;e.isTap&&(console.log("tap"),this.dispatcher.dispatch("tap",{}),clearTimeout(e.handler)),e.isPress&&this.dispatcher.dispatch("pressend",{}),e.points=e.points.filter((function(t){return Date.now()-t.t<500})),(n=e.points.length?Math.sqrt(Math.pow(t.clientX-e.points[0].x,2)+Math.pow(t.clientY-e.points[0].y,2))/(Date.now()-e.points[0].t):0)>1.5?(e.isFlick=!0,this.dispatcher.dispatch("flick",{startX:e.startX,startY:e.startY,clientX:t.clientX,clientY:t.clientY,isVertical:e.isVertical,isFlick:e.isFlick,velocity:n})):e.isFlick=!1,e.isPan&&this.dispatcher.dispatch("panend",{startX:e.startX,startY:e.startY,clientX:t.clientX,clientY:t.clientY,isVertical:e.isVertical,isFlick:e.isFlick,velocity:n}),this.dispatcher.dispatch("end",{startX:e.startX,startY:e.startY,clientX:t.clientX,clientY:t.clientY,isVertical:e.isVertical,isFlick:e.isFlick,velocity:n})}},{key:"cancel",value:function(t,e){clearTimeout(e.handler),this.dispatcher.dispatch("cancel",{})}}]),t}();function P(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return T(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return T(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function T(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Y(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function M(t,e,n){return e&&_(t.prototype,e),n&&_(t,n),t}var D=Symbol("tick"),x=Symbol("tick-handler"),R=Symbol("animations"),V=Symbol("start-time"),C=Symbol("pause-start"),I=Symbol("pause-time"),L=function(){function t(){Y(this,t),this.state="inited",this[R]=new Set,this[V]=new Map}return M(t,[{key:"start",value:function(){var t=this;if("inited"===this.state){this.state="started",this[I]=0;var e=Date.now();this[D]=function(){var n,r=Date.now(),o=P(t[R]);try{for(o.s();!(n=o.n()).done;){var i=n.value,a=void 0;a=t[V].get(i)<e?r-e-t[I]-i.delay:r-t[V].get(i)-t[I]-i.delay,i.duration<a&&(t[R].delete(i),a=i.duration),a>0&&i.receiveTime(a)}}catch(t){o.e(t)}finally{o.f()}t[x]=requestAnimationFrame(t[D])},this[D]()}}},{key:"pause",value:function(){"started"===this.state&&(this.state="paused",this[C]=Date.now(),cancelAnimationFrame(this[x]))}},{key:"resume",value:function(){"paused"===this.state&&(this.state="started",this[I]+=Date.now()-this[C],this[D]())}},{key:"reset",value:function(){this.pause(),this.state="inited";Date.now();this[I]=0,this[R]=new Set,this[V]=new Map,this[x]=null,this[C]=0}},{key:"add",value:function(t,e){arguments.length<2&&(e=Date.now()),this[R].add(t),this[V].set(t,e)}}]),t}(),F=function(){function t(e,n,r,o,i,a,c,u){Y(this,t),c=c||function(t){return t},u=u||function(t){return t},this.object=e,this.property=n,this.startValue=r,this.endValue=o,this.duration=i,this.timingFunction=c,this.delay=a,this.template=u}return M(t,[{key:"receiveTime",value:function(t){var e=this.endValue-this.startValue,n=this.timingFunction(t/this.duration);this.object[this.property]=this.template(this.startValue+e*n)}}]),t}();function U(t,e,n,r){var o=3*t-3*n+1,i=3*n-6*t,a=3*t,c=3*e-3*r+1,u=3*r-6*e,s=3*e;function l(t){return((o*t+i)*t+a)*t}return function(t){return function(t){return((c*t+u)*t+s)*t}(function(t){for(var e,n,r,c=t,u=0;u<8;u++){if(n=l(c)-t,Math.abs(n)<1e-6)return c;if(e=(3*o*(r=c)+2*i)*r+a,Math.abs(e)<1e-6)break;c-=n/e}var s=1,f=0;for(c=t;s>f;){if(n=l(c)-t,Math.abs(n)<1e-6)return c;n>0?s=c:f=c,c=(s+f)/2}return c}(t))}}var q=U(.25,.1,.25,1);U(.42,0,1,1),U(0,0,.58,1),U(.42,0,.58,1);function $(t){return($="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function J(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return N(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return N(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function N(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function z(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function B(t,e){return(B=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function G(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=K(t);if(e){var o=K(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return H(this,n)}}function H(t,e){return!e||"object"!==$(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function K(t){return(K=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Q=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&B(t,e)}(i,t);var e,n,r,o=G(i);function i(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),o.call(this)}return e=i,(n=[{key:"render",value:function(){var t=this;this.root=document.createElement("div"),this.root.classList.add("carousel");var e,n,r=J(this[v].src);try{for(r.s();!(e=r.n()).done;){var o=e.value,i=document.createElement("div");i.style.backgroundImage="url('".concat(o.img,"')"),this.root.appendChild(i)}}catch(t){r.e(t)}finally{r.f()}n=this.root,new X(n,new A(new E(n)));var a=new L;a.start();var c=null,u=this.root.children;this[d].position=0;var s=0,l=0;this.root.addEventListener("start",(function(t){a.pause(),clearInterval(c);var e=(Date.now()-s)/500;l=500*q(e)-500})),this.root.addEventListener("tap",(function(e){t.triggerEvent("click",{data:t[v].src[t[d].position],position:t[d].position})})),this.root.addEventListener("pan",(function(e){for(var n=e.clientX-e.startX-l,r=t[d].position-(n-n%500)/500,o=0,i=[-1,0,1];o<i.length;o++){var a=i[o],c=r+a;c=(c%u.length+u.length)%u.length,u[c].style.transition="none",u[c].style.transform="translateX(".concat(500*-c+500*a+n%500,"px)")}})),this.root.addEventListener("end",(function(e){a.reset(),a.start(),c=setInterval(f,3e3);var n=e.clientX-e.startX-l,r=t[d].position-(n-n%500)/500,o=Math.round(n%500/500);e.isFlick&&(o=e.velocity<0?Math.ceil(n%500/500):Math.floor(n%500/500));for(var i=0,s=[-1,0,1];i<s.length;i++){var h=s[i],p=r+h;p=(p%u.length+u.length)%u.length,u[p].style.transition="none",a.add(new F(u[p].style,"transform",500*-p+500*h+n%500,500*-p+500*h+500*o,500,0,q,(function(t){return"translateX(".concat(t,"px)")})))}t[d].position=t[d].position-(n-n%500)/500-o,t[d].position=(t[d].position%u.length+u.length)%u.length,t.triggerEvent("change",{position:t[d].position})}));var f=function(){var e=t.root.children,n=(t[d].position+1)%e.length,r=e[t[d].position],o=e[n];s=Date.now(),a.add(new F(r.style,"transform",500*-t[d].position,-500-500*t[d].position,500,0,q,(function(t){return"translateX(".concat(t,"px)")}))),a.add(new F(o.style,"transform",500-500*n,-500*n,500,0,q,(function(t){return"translateX(".concat(t,"px)")}))),t[d].position=n,t.triggerEvent("change",{position:t[d].position})};return c=setInterval(f,3e3),this.root}}])&&z(e.prototype,n),r&&z(e,r),i}(b);function W(t){return(W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Z(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function tt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function et(t,e){return(et=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function nt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ot(t);if(e){var o=ot(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return rt(this,n)}}function rt(t,e){return!e||"object"!==W(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ot(t){return(ot=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var it=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&et(t,e)}(i,t);var e,n,r,o=nt(i);function i(){return Z(this,i),o.apply(this,arguments)}return e=i,(n=[{key:"appendChild",value:function(t){this.template=t}},{key:"render",value:function(){return this.children=this[v].data.map(this.template),this.root=y("div",null,this.children).render(),this.root}}])&&tt(e.prototype,n),r&&tt(e,r),i}(b),at=[{img:"https://static001.geekbang.org/resource/image/bb/21/bb38fb7c1073eaee1755f81131f11d21.jpg",url:"https://time.geekbang.org",title:"蓝猫"},{img:"https://static001.geekbang.org/resource/image/1b/21/1b809d9a2bdf3ecc481322d7c9223c21.jpg",url:"https://time.geekbang.org",title:"橘猫"},{img:"https://static001.geekbang.org/resource/image/b6/4f/b6d65b2f12646a9fd6b8cb2b020d754f.jpg",url:"https://time.geekbang.org",title:"梨花加白猫"},{img:"https://static001.geekbang.org/resource/image/73/e4/730ea9c393def7975deceb48b3eb6fe4.jpg",url:"https://time.geekbang.org",title:"橘白猫"}];y("div",null,y(Q,{src:at,onChange:function(t){return console.log(t.detail.position)}}),y(it,{data:at},(function(t){return y("div",null,y("img",{src:t.img}),y("a",{href:t.url},t.title))}))).mountTo(document.body)}},[["7pVq",1]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,